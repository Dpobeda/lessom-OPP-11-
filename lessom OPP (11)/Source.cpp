#include <iostream>
#include <vector>
#include <string>

// ООП что, это.
// 1. Концепция ООП (3) мы знаем. Всего их (6).
// 2. Часто используемые концепции которые есть, SOLID, GOF, GRASP.

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// 1. SOLID - Общие принципы
// 2. GOF - Это 23 паторно разработки. Заранее потенциальных проблем, нужно быть готовым к этим проблемам.
// 3. GRASP - Это, общая отвественность.

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// Концепции.
// 1. 1/6 Концепций: Абстракция.
// 2. 2/6 Концепций: Повторное использование.
// 3. 3/6 Концепций: Передача сообщений. Говорит все объекты входящие в код, должны общаться между собой.
// 4. 4/6 Концепций: Инкуциляция. Инструмент языка программирование помогает объединять данных с методами их обрабатки или помагает закрытие данных.
// 5. 5/6 Концепций: Наследовательность. Инструмент для расширение создание программы. Способствует повторному использованию компонент программного обеспечения.
// 6. 6/6 Концепций: Полиморфизм. Способ писать линейные приложения имея динамическую память.

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// SOLID.
// 1. SRP - Принцип единствееной концепции. Выполняет одну функцию.
// 2. OCP - Система должна быть открыта для расширений, но закрыта для изменений.
// 3. LSP - Принцип постановки barbary lisky. Все наследники базового класса должны сохранять контракт базового класса. По факту тоже самое (OCP).
// 4. ISP - Принцип разделения интерфейса. У каждого класса должно быть столько интерефейсов сколько у него есть пользователей.
// 5. DIP - Принцип инверсии зависимости. Зависит об абстракции. Автомизируем, что делает объект класса, а не что он делает.

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

// Принципы ООП.
// 1. KISS - Сохраняйте это коротким и простым.
// 2. DRI(SST) - Не повторяй сам себя. (SST) - При дублирования функции или другого, нужно знать где оригинал.
// 3. YAGNI - Не делай то, что тебя не просили.

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

int main()
{
	


	return {};
}